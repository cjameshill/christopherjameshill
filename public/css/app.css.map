{"version":3,"sources":["app.scss","_variables.scss","../../../node_modules/bourbon/app/assets/stylesheets/css3/_selection.scss","../../../bower_components/susy/sass/susy/language/susy/_box-sizing.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","_base.scss","../../../bower_components/mappy-breakpoints/_mappy-breakpoints.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../../../bower_components/susy/sass/susy/language/susy/_gutters.scss","../../../bower_components/susy/sass/susy/output/support/_rem.scss","../../../bower_components/susy/sass/susy/language/susy/_container.scss","../../../bower_components/susy/sass/susy/output/support/_clearfix.scss","../../../bower_components/susy/sass/susy/language/susy/_span.scss","../../../bower_components/susy/sass/susy/output/shared/_direction.scss","_styles.scss","_forms.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_border-radius.scss","_off-canvas.scss","../../../node_modules/bourbon/app/assets/stylesheets/css3/_background.scss","../../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-gradient-parser.scss"],"names":[],"mappings":"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","file":"app.css","sourcesContent":["\n\n/* VENDOR\n========================================================================== */\n\n@import \"bourbon\";\n@import \"susy\";\n@import \"./bower_components/mappy-breakpoints/mappy-breakpoints\";\n\n/* BASE \n========================================================================== */\n\n@import '_variables.scss';\n@import '_base.scss';\n@import '_styles.scss';\n@import '_forms.scss';\n@import '_off-canvas.scss';\n\n","/* VARIABLES\n========================================================================== */\n\n$white: #fff;\n$light: #e8e8e8;\n$grey: #6a6a6a;\n$dark: #151515;\n$orange: #ff7600;\n$yellow: #ffd800;\n$blue: #00baff;\n$purple: #3b006c;\n$brown: #1f1600;\n$black: #000;\n\n$primaryColor: $dark;\n$secondaryColor: $white;\n$thirdColor: $grey;\n$fourthColor: $light;\n\n$gradientBlack: rgba(0, 0, 0, 0.8);\n$gradientGrey: rgba(0, 0, 0, 0.5);\n\n$gradientWhite: $white;\n$gradientLight: #e8e8e8;\n\n    $primaryGradientTop: $gradientBlack;\n    $primaryGradientBottom: $gradientGrey;\n\n    $secondaryGradientTop: $gradientWhite;\n    $secondaryGradientBottom: $gradientLight;  \n\n    $thirdGradientTop: $orange;\n    $thirdGradientBottom: $orange; \n\n\n$userButtonBg: $orange;\n$userButtonHover: $dark;\n\n$alertBarBg: $yellow;\n\n$loginBarBg: $light;\n\n$loginButtonBg: $orange;\n$loginButtonColor: $light;\n\n$loginButtonHoverBg: $dark;\n$loginButtonHoverColor: $light;\n\n$font1: 'Lobster', helvetica, sans-serif;\n$font2: 'Lato', helvetica, sans-serif;\n\n$navButtonColor: $primaryColor;\n$navButtonFont: $font1;\n$navButtonWeight: 400;\n$navButtonTransform: uppercase;\n$navButtonbgColor: $orange;\n$navButtonLetterSpacing: -0.03em;\n$navButtonFontSize: 2em;\n\n$sectionH: 650px;\n\n$loginBarH: 37rem;\n\n$topBarH: 7rem;\n$topBarBg: $dark;\n\n$off-canvas-width: 50%;\n$transition: all 200ms ease-in-out;\n\n\n\n@mixin linearGradient($top, $bottom){\n    background: $top;\n    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom));\n    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); \n    background: -o-linear-gradient(top,  $top 0%,$bottom 100%);\n    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%);\n    background: linear-gradient(to bottom,  $top 0%,$bottom 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 );\n}\n\n\n\n@mixin border-radius($radius) {\n  -webkit-border-radius: $radius;\n     -moz-border-radius: $radius;\n      -ms-border-radius: $radius;\n          border-radius: $radius;\n}\n\n@mixin opacity($opacity) {\n  opacity: $opacity;\n  $opacity-ie: $opacity * 100;\n  filter: alpha(opacity=$opacity-ie);\n}\n\n@mixin cover-background($img-uri) {\n    background: url($img-uri) no-repeat center center; \n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n}\n\n@mixin size($width, $height: $width) {\n      width: $width;\n      height: $height;\n}\n\n@mixin margin($margin, $padding) {\n      margin: $margin;\n      padding: $padding;\n}\n\n/* FONTS\n========================================================================== */\n\n@include selection {\n  background-color: $orange;\n}\n\n$aColor: $primaryColor;\n$aHover: $fourthColor;\n\n\n$bold: 800;\n$light: 100;\n\n$hSpacing: -0.06em;\n\n$fontMargin: 0.3em;\n$fontPadding: 0.3em;\n\np { \n    margin-bottom: $fontMargin/2;\n    padding: $fontPadding/2;\n    font-family: $font2;\n    font-weight: 400;\n    font-size: 1.8em;\n    line-height: 1.5em;\n    letter-spacing: -0.04em;\n}\n\nh1, h2, h3, h4, h5, small, span {\n    text-align: center;\n    line-height: 0.9em;\n    font-family: $font1;\n    font-weight: 400;\n    margin: $fontMargin;\n    padding: $fontPadding;\n    color: $primaryColor;\n}\n\nh1 {font-size: 6em; letter-spacing: $hSpacing;}\n\nh2 {font-size: 4.236em; letter-spacing: $hSpacing;}\n\nh3 {font-size: 2.618em; letter-spacing: $hSpacing;}\n\nh4 {font-size: 1.618em;}\n\nsmall, .font_small {font-size: 1.5em;}\n\nstrong { font-weight: $bold; }\n\nhr { width: 80%; margin: 0.5em auto;}\n\na {\n    &:active {text-decoration: none; color: $aColor;}\n    &:visited {text-decoration: none; color: $aColor;}\n    &:hover {text-decoration: none; color: $aHover;}\n    &:link {text-decoration: none; color: $aColor;}\n}\n\n\n$base-font-size: 9px; \n\n\nbutton {\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n\n/* GRID\n========================================================================== */\n\n$susy: (\n  columns: 12,\n  gutter-position: after,\n  gutters: .25,\n  global-box-sizing: border-box,\n);\n\n$susyFull: (\n  columns: 12,\n  gutter-position: after,\n  gutters: 0,\n  global-box-sizing: border-box,\n);\n\n@include border-box-sizing;\n\n$breakpoints: (\n  'small'     : 320px,\n  'med'       : 640px,\n  'large'     : 920px,\n  'wide'      : 1200px,\n  'mega'      : 1400px,\n  );\n\n\n/* Z-INDEX\n========================================================================== */\n\n$elements: footer, section, topBar, loginBar, alertBar, main, off-canvas, modals;\n\n$sectionElements: bg, contents;\n\n","@charset \"UTF-8\";\r\n\r\n/// Outputs the spec and prefixed versions of the `::selection` pseudo-element.\r\n///\r\n/// @param {Bool} $current-selector [false]\r\n///   If set to `true`, it takes the current element into consideration.\r\n///\r\n/// @example scss - Usage\r\n///   .element {\r\n///     @include selection(true) {\r\n///       background-color: #ffbb52;\r\n///     }\r\n///   }\r\n///\r\n/// @example css - CSS Output\r\n///   .element::-moz-selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n///\r\n///   .element::selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n\r\n@mixin selection($current-selector: false) {\r\n  @if $current-selector {\r\n    &::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    &::selection {\r\n      @content;\r\n    }\r\n  } @else {\r\n    ::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    ::selection {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","/* BASE\n========================================================================== */\nhtml { font-size: $base-font-size;\n    @include mappy-bp(large) {\n          font-size: 14px;\n        }\n}\n\n#contentWrapper, footer, header, section, .content, .bg, .logo { /* Clearfix */\n    @include clearfix;\n}\n#contentWrapper, footer, header, section, .content, div { /* Display Block */\n    display: block;\n}\n\n.alertBar, .loginBar, .topBar, .topBar div, li, .logo img, .flex-item { /* Transition */\n    @include transition($transition);\n}\n\n\nsection, footer, .topBar, .copyright, .content, .sectionHeader, .footerHeader, .bg, .alertBar, .loginBar, .logoutButton, .loginButton {\n    width: 100%;\n    height: auto;\n    overflow: hidden;\n}\n\nsection, footer { /* Position Relative */\n    position: relative;\n}\n\n.bg, .logoutButton, .loginButton, nav, .copyright { /* Position Absolute */\n    position: absolute;\n}\n\n.topBar, .alertBar, .loginBar  { /* Position Fixed */\n    position: fixed;\n}\n\n.topBar, .bg { /* Position Top Left */\n    top: 0;\n    left: 0;\n}\n\nbody, .content, .bg, footer, section, ul, .topBar, .logoutButton, .loginButton, .flex-container, .logo { /* Margin 0 Padding 0 */\n    margin: 0;\n    padding: 0;\n}\n\n/* BASE ELEMENTS\n========================================================================== */\n\nsection {\n    z-index: index($elements, section);\n    min-height: 100vh;\n    @include linearGradient($gradientWhite, $gradientLight);\n\n}\n\nfooter {\n    z-index: index($elements, footer);\n \n}\n\n&.first { .content { padding: 12rem 0 0 0 !important; } }\n\n\n\n.sectionHeader, .footerHeader {\n    h1, h2, h3 { text-align: right; font-family: $font1; font-weight: 400; letter-spacing: -0.04em;  } \n}\n\n\n\n.logo {\n    h1 {color: $thirdColor;}\n}\n\nimg { \n    height: 100%;\n    width: auto;\n}\n\n.copyright {\n    bottom: 0;\n    line-height: 2em;\n    font-family: $font1;\n    font-size: 1.5em;\n    color: $thirdColor;\n    text-align: center;\n    text-transform: uppercase;\n}\n\n\n/* GRID\n========================================================================== */\n\n.grid, .row { @include margin(0, gutter()); }\n\n.grid {\n    @include container();\n}\n\n.row {\n    @include span(12);\n}\n\n.item {\n    @include span(12);\n    margin-bottom: gutter();\n\n    @include mappy-bp(med) {\n        @include span(6);\n        padding: gutter();\n        &:last-child { @include span(6 last); }\n        }\n}\n\n\n\n\n.flex-container {\n    height: 100vh;\n    padding: 3em;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex-direction: row;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-flex-wrap: nowrap;\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n    -webkit-justify-content: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-align-content: center;\n    -ms-flex-line-pack: center;\n    align-content: center;\n    -webkit-align-items: center;\n    -ms-flex-align: center;\n    align-items: center;\n    }\n\n\n.new, .email {\n    font-family: $font1;\n    font-size: 6em;\n    color: $thirdColor;\n    text-align: center;\n    line-height: 1.2em;\n//    background: $gradientGrey;\n    \n}\n\n.logo, .email {\n    display: block;\n    height: auto;\n    -webkit-order: 0;\n    -ms-flex-order: 0;\n    order: 0;\n    -webkit-flex: 0 0 100%;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    -webkit-align-self: center;\n    -ms-flex-item-align: center;\n    align-self: center;\n}\n\n\n\n/* NAVIGATION\n========================================================================== */\n\nnav {\n    li {\n        color: $navButtonColor;\n        font-family: $navButtonFont;\n        font-weight: $navButtonWeight;\n        text-transform: $navButtonTransform;\n        letter-spacing: $navButtonLetterSpacing;\n        text-align: center;\n        cursor: pointer;\n\n        &:hover {\n            background: $navButtonbgColor;\n        }\n    }    \n}\n\n\n/* TOPBAR\n========================================================================== */\n\n   \n.topBar {\n    height: $topBarH;\n    background: none;\n    z-index: index($elements, topBar);\n}\n\n\n\n","// Mappy breakpoints\n// -----------------\n// Output media query with focus on min-width, max-width, min-height and max-height. \n// Other media rules are passed as the second argument in a map\n// \n// @author Zell Liew      \n// =================\n$breakpoints: () !default;\n$mappy-queries: () !default;\n\n// Mappy BP [Mixin]\n// ----------------\n// - $queries         : <string> or <number> in the format: \n//                      <min-width> <max-width> h <min-height> <max-height> <key> <value>\n// - $type            : <media-type> \n// - $query-fallback  : <string> selector class\n// - $breakpoints     : <map>\n@mixin mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n\n  // Gets mappy map through mappy-bp fn\n  $mappy-map: mappy-bp($queries, $type, $query-fallback, $breakpoints);\n\n  // Outputs media string\n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if $query-fallback {\n    #{$query-fallback} & {\n      @content;\n    }\n  }\n}\n\n// Mappy Query [Mixin]\n// -------------------\n// Output query from $mappy-queries map. \n// $query : <string> from $mappy-queries key\n@mixin mappy-query($query, $mappy-queries: $mappy-queries) {\n  @if not map-has-key($mappy-queries, $query) {\n    @error \"#{$mappy-queries} does not contain #{$query}\";\n  }\n\n  $mappy-map: map-get($mappy-queries, $query);\n  \n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if map-get($mappy-map, query-fallback) {\n    #{map-get($mappy-map, query-fallback)} & {\n      @content;\n    }\n  }\n}\n\n// Mappy BP [Function]\n// -------------------\n// Returns a map with 3 keys\n// - type           : Media type\n// - media-string   : media query string\n// - query-fallback : query fallback (if any)\n@function mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  $media-string: ();\n  $_return: ();\n  $media-map: parse-bp($queries, $breakpoints);\n\n  @each $key, $value in $media-map {\n    @if $value and $value != 0 {\n      @if $media-string == (()) {\n        $media-string: append($media-string, unquote(\"(#{$key}: #{$value})\"));\n      }\n\n      @else {\n        $media-string: append($media-string, unquote(\"and (#{$key}: #{$value})\"));\n      }\n    }\n  }\n  $_return: (\n    type: $type, \n    media-string: inspect($media-string), \n    query-fallback: $query-fallback\n  );\n\n  @return $_return;\n}\n\n// BP [Mixin]\n// ----------\n// Convenience mixin for Mappy Breakpoints\n@mixin bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  @include mappy-bp($queries, $type, $query-fallback, $breakpoints) {\n    @content;\n  }\n}\n\n// Parse BP [function]\n// -------------------\n// Parses arguments and returns a map with 4 keys\n@function parse-bp($queries, $breakpoints) {\n  $_return: ();\n  $_i: 1;\n  $_minw: null;\n  $_maxw: null;\n  $_minh: null;\n  $_maxh: null;\n  $_length: length($queries);\n\n  // Checks for width queries\n  $_minw: nth($queries, 1);\n  $_minw: mappy-validate($_minw, $breakpoints);\n\n  // Check for width queries\n  @if $_minw {\n    $_minw: mappy-convert-to-em($_minw);\n    $_return: map-merge($_return, (min-width: $_minw));\n    $queries: set-nth($queries, 1, null);\n  }\n\n  // Checks if there is a max width query\n  @if $_minw and $_length >= 2 {\n    $_maxw: nth($queries, 2);\n    $_maxw: mappy-validate($_maxw, $breakpoints);\n  }\n\n  @if $_maxw {\n    $_maxw: mappy-convert-to-em($_maxw - 1px);\n    $_return: map-merge($_return, (max-width: $_maxw));\n    $queries: set-nth($queries, 2, null);\n  }\n  \n  // Checks for height queries\n  $_h: index($queries, h) or index($queries, height);\n\n  @if $_h {\n    $_minh: nth($queries, $_h + 1);\n    $_minh: mappy-validate($_minh, $breakpoints);\n\n    @if $_minh {\n      $_minh: mappy-convert-to-em($_minh);\n      $_return: map-merge($_return, (min-height: $_minh));\n      $queries: set-nth($queries, $_h + 1, null);\n    }\n\n    // Checks if there is a max height query\n    @if $_length - $_h >= 2 {\n      $_maxh: nth($queries, $_h + 2);\n      $_maxh: mappy-validate($_maxh, $breakpoints);\n    }\n\n    @if $_maxh {\n      $_maxh: mappy-convert-to-em($_maxh - 1px);\n      $_return: map-merge($_return, (max-height: $_maxh));\n      $queries: set-nth($queries, $_h + 2, null);\n    }\n    // Reset h marker\n    $queries: set-nth($queries, $_h, null);\n  }\n\n  // Checks for other queries\n  @while $_i <= length($queries) {\n    $_key: nth($queries, $_i);\n\n    @if $_key and $_length - $_i >= 1 {\n      $_val: nth($queries, $_i + 1);\n      $_return: map-merge($_return, (#{$_key}: $_val));\n      $queries: set-nth($queries, $_i, null);\n      $queries: set-nth($queries, $_i + 1, null);\n    }\n\n    @else if $_key {\n      @warn \"Mappy Breakpoints is missing value for media feature \"#{$_key}\"\";\n    }\n    $_i: $_i + 1;\n  }\n  @return $_return;\n}\n\n// Mappy Validate [Function]\n// -------------------------\n// Checks if $query given is one of the following: \n// 1) Is a $key in the $breakpoints map\n// 2) Is a number\n// 3) Is a \"max\", \"max-width\" or \"max-height\" string\n@function mappy-validate($query, $breakpoints) {\n  $_return: null;\n\n  @if map-has-key($breakpoints, $query) {\n    $_return: map-get($breakpoints, $query);\n  }\n\n  @else if type-of($query) == number {\n    $_return: $query;\n  }\n\n  @else if $query == \"max\" or $query == \"max-height\" or $query == \"max-width\" {\n    $_return: 0;\n  }\n\n  @else {\n    $_return: null;\n  }\n  @return $_return;\n}\n\n// Mappy Convert To Em [Function]\n// -------------------------------\n// Checks and converts px values to em. Leave other units untouched.\n\n@function mappy-convert-to-em($val) {\n  @if unit($val) == \"px\" or $val == 0 {\n    @return mappy-em($val);\n  }\n\n  @else {\n    @error \"Breakpoint value must have a unit if it's a number\";\n  }\n}\n\n// Mappy Em [Function]\n// --------------------\n// Converts pixels to em with $base-font-size\n// - https://gist.github.com/ijy/1441967\n@function mappy-em($target, $context: 16px) {\n  @if $target == 0 {\n    @return 0;\n  }\n  @return $target / $context * 1em;\n}","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","/* STYLES\n========================================================================== */\n.userButton { background: $userButtonBg; &:hover { background: $userButtonHover; } }\n\n.logo { height: $topBarH; }\n\n.topBar {\n    nav {\n        top: 0;\n        right: 1rem;\n        height: $topBarH;\n    }\n    \n    ul {\n        .buttons { display: none; }\n        .divider { border-right: 3px solid $primaryColor !important; }\n        .menu-toggle { display: inline-block; }\n         \n        @include mappy-bp(med) {\n                .buttons { display: inline-block; }\n                .menu-toggle { display: none; }\n                }\n    }\n    \n    li {\n        display: inline-block;\n        line-height: $topBarH;  \n        font-size: $navButtonFontSize;\n        padding: 0 0.3em;\n        }\n                \n         \n}\n\n.topBar.reduce {\n    height: ($topBarH)-3;\n    background: $topBarBg;\n    \n    .userButton, li, .logo span { line-height: ($topBarH)-3; }\n    \n     li, .logo span { color: $secondaryColor; font-size: 1.7em;}\n\n    .logo img { @include transform(scale(0.5) translateY(-3.2rem)); }\n}\n\n.topBar.slideUp {\n    @include transform(translateY(-($topBarH*2)));\n}\n\n.alertBar, .loginBar {\n    h1, h2, h3 {color: $primaryColor; text-transform: none;}\n}\n\n.alertBar {\n    background: $alertBarBg;\n    z-index: 999999;\n    height: $topBarH;\n}\n\n.loginBar {\n    background: $loginBarBg;\n     z-index: 999980; \n    height: $loginBarH;\n    padding-top: 9em;\n    top: -$loginBarH;\n    \n    .logoutButton, .loginButton {\n        bottom: 0;\n        left: 0;\n        background: $loginButtonBg;\n        color: $loginButtonColor;\n        text-align: center;\n        font-family: $font1;\n        font-size: 2.5em;\n        line-height: 2em;\n        text-transform: uppercase;\n        \n        &:hover {\n            background: $loginButtonHoverBg;\n            color: $loginButtonHoverColor;\n        }\n     \n    }\n}\n\n.loginBar.is-open { transform: translate3d(0, $loginBarH, 0); }\n.topBar nav ul li.is-open { color: $secondaryColor;}    \n.topBar nav ul li.closeButton { display: none;}\n\n\n/* SECTIONS\n========================================================================== */\n\n\n\n/* FOOTER\n========================================================================== */\n\n//footer {\n//    bottom: 0;\n//    height: 100vh;\n//    background: $dark;\n//    \n//    .footerHeader h2 { color: $secondaryColor; }\n//    \n//    .item {\n//        header h3 { color: $secondaryColor; }\n//        }\n//}","/////////////////////   FORMS  /////////////////\n\n\nform {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    \n}\n\nlabel {\n    font-family: $font2;\n    text-align: center;\n    font-size: 1.5em;\n    color: $grey;\n    text-transform: uppercase;\n    line-height: 1.5em;\n}\n\ninput[type=\"email\"],\ninput[type=\"password\"]{\n    text-align: center;\n    font-family: $font2;\n    width: auto;\n    background: white;\n    padding: 0.5em;\n    border: none;\n    font-size: 2em;\n    @include border-top-radius(5px);\n    @include border-bottom-radius(5px);\n}\n\n\n.form-group{\n    font-family: 'Open Sans Condensed', arial, sans;\n    width: 500px;\n    padding: 30px;\n    background: #FFFFFF;\n    margin: 50px auto;\n    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);\n    -moz-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);\n    -webkit-box-shadow:  0px 0px 15px rgba(0, 0, 0, 0.22);\n\n}\n.form-group h2{\n    background: #4D4D4D;\n    text-transform: uppercase;\n    font-family: 'Open Sans Condensed', sans-serif;\n    color: #797979;\n    font-size: 18px;\n    font-weight: 100;\n    padding: 20px;\n    margin: -30px -30px 30px -30px;\n}\n.form-group input[type=\"text\"],\n.form-group input[type=\"date\"],\n.form-group input[type=\"datetime\"],\n.form-group input[type=\"email\"],\n.form-group input[type=\"number\"],\n.form-group input[type=\"search\"],\n.form-group input[type=\"time\"],\n.form-group input[type=\"url\"],\n.form-group input[type=\"password\"],\n.form-group textarea,\n.form-group select \n{\n    box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    outline: none;\n    display: block;\n    width: 100%;\n    padding: 7px;\n    border: none;\n    border-bottom: 1px solid #ddd;\n    background: transparent;\n    margin-bottom: 10px;\n    font: 16px Arial, Helvetica, sans-serif;\n    height: 45px;\n}\n.form-group textarea{\n    resize:none;\n    overflow: hidden;\n}\n.form-group input[type=\"button\"], \n.form-group input[type=\"submit\"]{\n    -moz-box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    -webkit-box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    background-color: $orange;\n    border: none;\n    display: inline-block;\n    cursor: pointer;\n    color: #FFFFFF;\n    font-family: 'Open Sans Condensed', sans-serif;\n    font-size: 14px;\n    padding: 8px 18px;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n.form-group input[type=\"button\"]:hover, \n.form-group input[type=\"submit\"]:hover {\n    background:linear-gradient(to bottom, #34CACA 5%, #30C9C9 100%);\n    background-color:#ca6834;\n}\n\n","@charset \"UTF-8\";\n\n/// Provides a quick method for targeting `border-radius` on both corners on the side of a box.\n///\n/// @param {Number} $radii\n///   List of arguments\n///\n/// @example scss - Usage\n///   .element-one {\n///     @include border-top-radius(5px);\n///   }\n///\n///   .element-two {\n///     @include border-left-radius(3px);\n///   }\n///\n/// @example css - CSS Output\n///   .element-one {\n///     border-top-left-radius: 5px;\n///     border-top-right-radius: 5px;\n///   }\n///\n///   .element-two {\n///     border-bottom-left-radius: 3px;\n///     border-top-left-radius: 3px;\n///   }\n///\n/// @output `border-radius`\n\n@mixin border-top-radius($radii) {\n  border-top-left-radius: $radii;\n  border-top-right-radius: $radii;\n}\n\n@mixin border-right-radius($radii) {\n  border-bottom-right-radius: $radii;\n  border-top-right-radius: $radii;\n}\n\n@mixin border-bottom-radius($radii) {\n  border-bottom-left-radius: $radii;\n  border-bottom-right-radius: $radii;\n}\n\n@mixin border-left-radius($radii) {\n  border-bottom-left-radius: $radii;\n  border-top-left-radius: $radii;\n}\n","/* OFF-CANVAS\n========================================================================== */\n\n.off-canvas-wrapper {\n    display:  block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n    z-index: index($elements, off-canvas);\n   \n}\n\n.off-canvas {\n    display: block;\n    @include transition($transition); \n    position: absolute;\n    top: 0;\n    left: -$off-canvas-width;\n    height: 100%;\n    width: $off-canvas-width;\n//    background: black;\n    @include background(linear-gradient(#ffffff, #f0f0f0) left repeat);   \n    pointer-events:all;\n    padding: 0;\n    margin: 0;\n    \n    .content {\n        margin: 0;\n        padding: 0;\n    }\n    \n    ul {\n        margin: 0;\n        padding: 0;\n    }\n    \n    li {\n        font-size: 2.8em !important;\n        color: $grey;\n        text-align: left;\n        padding: 0.2em 0.3em !important;\n        line-height: 0.8em !important;\n        &:hover {\n            color: white;\n        }\n    }\n    \n    .logo {\n        width: ($off-canvas-width*2);\n        height: 16rem;\n        background: none;\n        text-align: center;\n        padding: 5rem 1rem;\n        \n        span { color: white; font-size: 30px; }\n        \n        img { width: 8rem; height: auto; }\n        \n    }\n       \n}\n\n.main {\n    display: block;\n    z-index: index($elements, main);\n    @include transition($transition); \n    \n}\n\n.off-canvas.is-open {\n        transform: translate3d($off-canvas-width*2, 0, 0);\n        \n}\n\n\n.main.is-open {\n        transform: translate3d($off-canvas-width, 0, 0);\n    .bgFullOverlay.is-open {\n        background: rgba(0, 0, 0, 1)!important;\n    }\n}\n\n","//************************************************************************//\n// Background property for adding multiple backgrounds using shorthand\n// notation.\n//************************************************************************//\n\n@mixin background($backgrounds...) {\n  $webkit-backgrounds: ();\n  $spec-backgrounds: ();\n\n  @each $background in $backgrounds {\n    $webkit-background: ();\n    $spec-background: ();\n    $background-type: type-of($background);\n\n    @if $background-type == string or $background-type == list {\n      $background-str: if($background-type == list, nth($background, 1), $background);\n\n      $url-str:       str-slice($background-str, 1, 3);\n      $gradient-type: str-slice($background-str, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n    }\n\n    @else {\n      $webkit-background: $background;\n      $spec-background:   $background;\n    }\n\n    $webkit-backgrounds: append($webkit-backgrounds, $webkit-background, comma);\n    $spec-backgrounds:   append($spec-backgrounds,   $spec-background,   comma);\n  }\n\n  background: $webkit-backgrounds;\n  background: $spec-backgrounds;\n}\n","@function _linear-gradient-parser($image) {\n  $image: unquote($image);\n  $gradients: ();\n  $start: str-index($image, \"(\");\n  $end: str-index($image, \",\");\n  $first-val: str-slice($image, $start + 1, $end - 1);\n\n  $prefix: str-slice($image, 1, $start);\n  $suffix: str-slice($image, $end, str-length($image));\n\n  $has-multiple-vals: str-index($first-val, \" \");\n  $has-single-position: unquote(_position-flipper($first-val) + \"\");\n  $has-angle: is-number(str-slice($first-val, 1, 1));\n\n  @if $has-multiple-vals {\n    $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);\n  }\n\n  @else if $has-single-position != \"\" {\n    $pos: unquote($has-single-position + \"\");\n\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $prefix + \"to \" + $pos + $suffix\n    );\n  }\n\n  @else if $has-angle {\n    // Rotate degree for webkit\n    $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);\n  }\n\n  @else {\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $image\n    );\n  }\n\n  @return $gradients;\n}\n"],"sourceRoot":"/source/"}