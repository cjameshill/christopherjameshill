{"version":3,"sources":["../../../node_modules/bourbon/app/assets/stylesheets/css3/_selection.scss","styles.scss","../../../bower_components/mappy-breakpoints/_mappy-breakpoints.scss","../../../node_modules/bourbon/app/assets/stylesheets/css3/_background.scss","../../../node_modules/bourbon/app/assets/stylesheets/helpers/_linear-gradient-parser.scss","../../../bower_components/susy/sass/susy/language/susy/_box-sizing.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../../../bower_components/susy/sass/susy/output/support/_rem.scss","../../../bower_components/susy/sass/susy/language/susy/_container.scss","../../../bower_components/susy/sass/susy/output/support/_clearfix.scss","../../../bower_components/susy/sass/susy/language/susy/_span.scss","../../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../../bower_components/susy/sass/susy/language/susy/_gallery.scss","../../../bower_components/susy/sass/susy/language/susy/_isolate.scss","../../../bower_components/susy/sass/susy/language/susy/_rows.scss","../../../bower_components/susy/sass/susy/output/float/_end.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["@charset \"UTF-8\";\r\n\r\n/// Outputs the spec and prefixed versions of the `::selection` pseudo-element.\r\n///\r\n/// @param {Bool} $current-selector [false]\r\n///   If set to `true`, it takes the current element into consideration.\r\n///\r\n/// @example scss - Usage\r\n///   .element {\r\n///     @include selection(true) {\r\n///       background-color: #ffbb52;\r\n///     }\r\n///   }\r\n///\r\n/// @example css - CSS Output\r\n///   .element::-moz-selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n///\r\n///   .element::selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n\r\n@mixin selection($current-selector: false) {\r\n  @if $current-selector {\r\n    &::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    &::selection {\r\n      @content;\r\n    }\r\n  } @else {\r\n    ::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    ::selection {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n","@import \"bourbon\";\n@import \"susy\";\n@import \"./bower_components/mappy-breakpoints/mappy-breakpoints\";\n\n\n//////////////////////// VARIABLES /////////////////////\n\n$white: #fff;\n$light: #f0f0f0;\n$grey: #6a6a6a;\n$dark: #151515;\n$orange: #ff7600;\n$yellow: #ffd800;\n$blue: #00baff;\n$purple: #3b006c;\n$brown: #1f1600;\n$black: #000;\n\n\n\n$alpha: 0.7;\n\n$article: #fff;\n\n$fontLight: 100;\n$fontMed: 400;\n$bold: 600;\n$heavy: 800;\n\n$fontWeight:800;\n\n$acolor: #454545;\n$ahover: #a3a3a3;\n\n$tighter: -0.04em;\n$tightSpacing: -0.02em;\n$normalSpacing: 0;\n$spaced: 0.2em;\n\n$border: 8px;\n\n$sectionH: 650px;\n\n$topBarH: 7rem;\n\n$off-canvas-width: 50%;\n$transition: all 300ms ease-in-out;\n\n@include selection {\n  background-color: $orange;\n}\n\n$font1: 'fira-sans-2', helvetica, sans-serif;\n$font2: 'aktiv-grotesk-std', 'Aktiv Grotesk', helvetica, sans-serif;\n\n$navButtonColor: white;\n$navButtonFont: $font1;\n$navButtonWeight: 800;\n$navButtonTransform: uppercase;\n$navButtonbgColor: $orange;\n\n$susy: (\n  flow: ltr,\n  math: fluid,\n  output: float,\n    container: auto,\n  container-position: center,\n  columns: 12,\n    gutter-position: after,\n  gutters: 0,\n  debug: (\n    image: hide,\n    color: rgba(#ff66a7, .80),\n    output: background,\n    toggle: top right,\n  )\n);\n\n\n$base-font-size: 9px; \n\n$breakpoints: (\n  'small'     : 320px,\n  'med'       : 640px,\n  'large'     : 920px,\n  'wide'      : 1200px,\n  'mega'      : 1400px,\n  );\n\n\n\nsection {\n    .bgOverlay:after {\n        content: '';\n        position: absolute;\n        display: block;\n        height: $sectionH;\n        width: 100%;\n        top: 0;\n        left: 0;\n        background: rgba(0, 0, 0, 0.5);\n    }\n}\n\n\n//----------------------- Primary Styles ------------- //\n\nhtml {\n    font-size: $base-font-size;\n  \n    @include mappy-bp(large) {\n          font-size: 16px;\n        }\n    \n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    background: white;\n           @include background(linear-gradient(#f0f0f0, #ffffff) left repeat);   \n}\n\np { \n    margin-bottom: 1.3em;\n    font-family: $font1;\n    font-weight: $bold;\n    font-size: 1.7em;\n    line-height: 1.5em;\n}\n\nh1, h2, h3, h4, h5, small {\n    text-align: center;\n    text-transform: uppercase;\n    line-height: 0.9em;\n    font-family: $font1;\n    font-weight: 800;\n    color: $dark;\n}\n\nh1 {font-size: 6em; letter-spacing: $tightSpacing;}\n\nh2 {font-size: 4.236em; letter-spacing: $tightSpacing;}\n\nh3 {font-size: 2.618em; letter-spacing: $tighter;}\n\nh4 {font-size: 1.618em;}\n\nsmall, .font_small {font-size: 1em;}\n\nstrong { font-weight: $bold; }\n\nhr { width: 60%; margin: 2em auto;}\n\na {\n    &:active {text-decoration: none; color: $acolor;}\n    &:visited {text-decoration: none; color: $acolor;}\n    &:hover {text-decoration: none; color: $ahover;}\n    &:link {text-decoration: none; color: $acolor;}\n}\n\n\n@include border-box-sizing;\n\n@mixin background-cover() {\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n}\n\n\n\n/////////////////////   DOM STYLES  /////////////////\n\n.topBar, header, section, .content, .grid, .row, .item, .logo, nav, .bg, .logo img, nav li, .menu-toggle {\n    display: block;\n    @include clearfix;\n    @include transition($transition);\n}\n\nsection, .topBar, .content {\n    width: 100%;\n    overflow: hidden;\n}\n\nsection {\n    position: relative;\n    min-height: $sectionH;\n    \n    &:first-of-type {\n            .content { padding: 12rem 0 5rem 0 !important; }\n\n    }\n}\n\nheader {\n    margin: 0.2em !important;\n    padding: 0.7em 0 !important;\n//    background: $light;\n    text-align: center;\n    font-family: $font1;\n    color: $dark;\n    line-height: 0.8em;\n    font-weight: $bold;\n    font-size: 2em;\n    text-transform: uppercase;\n}\n\narticle {\n    margin: 0 !important;\n    padding: 0.7em !important;\n}\n\n.grid {\n    @include container(90%);\n    padding: gutter();\n    \n    .row {\n        padding: gutter();\n        @include span(12);\n        \n        .item {\n            @include span(12);\n            min-height: 14rem;\n            margin: gutter();\n            background-color: $light;\n//            &:last-child { @include gallery(12 last); }\n            \n            @include mappy-bp(large) {\n                @include gallery(6);\n                &:last-child { @include gallery(6 last); }\n                }\n            \n            &:hover { background-color: $orange; }\n        }\n    }\n}\n\nnav {\n    ul {\n        li {\n            color: $navButtonColor;\n            font-family: $navButtonFont;\n            font-weight: $navButtonWeight;\n            text-transform: $navButtonTransform;\n            margin: 0;\n            padding: 0 0.6em;\n            line-height: 2em;\n            \n            &:hover {\n                background: $navButtonbgColor;\n            }\n            \n        }\n    }\n}\n\n.bg {\n    @include background-cover();\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -999;\n}\n\n.cover {\n//    background: $orange;\n//@include background(linear-gradient(#f0f0f0, #ffffff) left repeat);\n//    .bg { background: url('../images/bg_stadium_2.jpg') repeat center center; }\n}\n\n\n.s2, .footer {\n    background: $dark;\n    header h3, header h2, p { color: $light; }\n    \n}\n\n.s3 {\n    .bg { background: url('../images/bg_stadium_3.jpg') repeat center center; }\n}\n\n\n#grid_partnership { \n    @include container(80%);\n    .item {\n            background-color: $light !important;\n        }\n}\n\n#grid_ourteam {  \n    @include container(100%);\n    @include layout(12 .1);\n    .item {\n            background-color: rgba($dark, 0.9) !important;\n            header { color: white !important; }\n        }\n}\n\n#grid_footer {\n    .item {\n        background-color: transparent !important;\n        header { color: white !important; }\n            }\n}\n\n\n\n\n\n.topBar {\n    position: fixed;\n    z-index: 99999;\n    top: 0;\n    left: 0;\n    padding: 0 3rem;\n    height: $topBarH;\n    background: rgba($dark, $alpha*0);\n    \n    .menu-toggle {\n            position: fixed;\n            right: 0;\n            top: 0;\n            height: $topBarH;\n            font-size: 1.5em;\n            color: $navButtonColor;\n            font-family: $navButtonFont;\n            font-weight: $navButtonWeight;\n            text-transform: $navButtonTransform;\n            margin: 0;\n            padding: 0 0.6em;\n            line-height: $topBarH;\n            background: $orange;\n    }    \n    \n    .logo img {\n        height: ($topBarH)-2;\n        margin: 0.4em 0;\n        width: auto;\n    }\n    \n    nav {\n        position: absolute;\n        top: 0;\n        right: 8rem;\n        transform: translate3d(0, -$topBarH*2, 0);\n        \n        @include mappy-bp(med) {\n            transform: translate3d(0, 0, 0);\n        }\n            ul {\n                li {\n                    display: inline-block;\n                    font-size: 1.7em;\n                    text-align: center;\n                    line-height: $topBarH;\n                }\n            }\n    }\n}\n\n.topBar.reduce {\n    height: ($topBarH)-3;\n        background: rgba($dark, $alpha);\n    @include transition($transition); \n    \n    .menu-toggle { line-height: ($topBarH)-3; }\n     li { line-height: ($topBarH)-3; font-size: 1.2em }\n    .logo img { @include transform(scale(0.5) translateY(-1.9rem)); }\n}\n\n\n/////////////////////   OFF CANVAS  /////////////////\n\n.off-canvas-wrapper {\n    display:  block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    pointer-events: none;\n   \n}\n\n.off-canvas {\n    display: block;\n    @include transition($transition); \n    position: absolute;\n    top: 0;\n    left: -$off-canvas-width;\n    height: 100%;\n    width: $off-canvas-width;\n    background: black;\n//    @include background(linear-gradient($black, #2e2e2e) left repeat);   \n    pointer-events:all;\n    padding: 0;\n    margin: 0;\n    \n    .content {\n        margin: 0;\n        padding: 0;\n    }\n    \n    li {\n        font-size: 2em !important;\n        line-height: 0.8em !important;\n        &:hover {\n            line-height: 2em !important;\n        }\n    }\n    \n    .logo {\n        width: ($off-canvas-width*2);\n        height: 16rem;\n        background: none;\n        text-align: center;\n        padding: 5rem 1rem;\n        \n        \n        img { width: 8rem; height: auto; }\n        \n    }\n       \n}\n\n.main {\n    display: block;\n    z-index: 10;\n    @include transition($transition); \n    \n}\n\n.off-canvas.is-open {\n        transform: translate3d($off-canvas-width*2, 0, 0);\n        \n}\n\n\n.main.is-open {\n        transform: translate3d($off-canvas-width, 0, 0);\n    .bgFullOverlay.is-open {\n        background: rgba(0, 0, 0, 1)!important;\n    }\n}\n\n\n/////////////////////   FORMS  /////////////////\n\n.form-group{\n    font-family: 'Open Sans Condensed', arial, sans;\n    width: 500px;\n    padding: 30px;\n    background: #FFFFFF;\n    margin: 50px auto;\n    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);\n    -moz-box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.22);\n    -webkit-box-shadow:  0px 0px 15px rgba(0, 0, 0, 0.22);\n\n}\n.form-group h2{\n    background: #4D4D4D;\n    text-transform: uppercase;\n    font-family: 'Open Sans Condensed', sans-serif;\n    color: #797979;\n    font-size: 18px;\n    font-weight: 100;\n    padding: 20px;\n    margin: -30px -30px 30px -30px;\n}\n.form-group input[type=\"text\"],\n.form-group input[type=\"date\"],\n.form-group input[type=\"datetime\"],\n.form-group input[type=\"email\"],\n.form-group input[type=\"number\"],\n.form-group input[type=\"search\"],\n.form-group input[type=\"time\"],\n.form-group input[type=\"url\"],\n.form-group input[type=\"password\"],\n.form-group textarea,\n.form-group select \n{\n    box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    outline: none;\n    display: block;\n    width: 100%;\n    padding: 7px;\n    border: none;\n    border-bottom: 1px solid #ddd;\n    background: transparent;\n    margin-bottom: 10px;\n    font: 16px Arial, Helvetica, sans-serif;\n    height: 45px;\n}\n.form-group textarea{\n    resize:none;\n    overflow: hidden;\n}\n.form-group input[type=\"button\"], \n.form-group input[type=\"submit\"]{\n    -moz-box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    -webkit-box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    box-shadow: inset 0px 1px 0px 0px #45D6D6;\n    background-color: $orange;\n    border: none;\n    display: inline-block;\n    cursor: pointer;\n    color: #FFFFFF;\n    font-family: 'Open Sans Condensed', sans-serif;\n    font-size: 14px;\n    padding: 8px 18px;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n.form-group input[type=\"button\"]:hover, \n.form-group input[type=\"submit\"]:hover {\n    background:linear-gradient(to bottom, #34CACA 5%, #30C9C9 100%);\n    background-color:#ca6834;\n}\n\n\n///////////////////////   FOOTER  /////////////////\n//\n//\n//\n//\n//.footer {\n//    background: $dark;\n//    bottom: 0;\n//\n//        .content {\n//            padding-top: 3rem;\n//        }\n//    \n//        .grid {\n//            margin: 2rem 0;\n//            padding: 0;\n//            \n//            header {\n//                color: $grey;\n//                font-size: 1.5em;\n//            }\n//        \n//            .item {\n//                @include span(6);\n//                display: block;\n//                padding: gutter();\n//                min-height: 5rem;\n//                \n//                &:last-child {\n//                    @include span(6 last);\n//                    \n//                }\n//            }\n//        }\n//    \n//        .copyright {\n//            position: absolute;\n//            bottom: 0;\n//            height: 1.5em;\n//            width: 100%;\n//            color: $light;\n//            text-align: center;\n//            font-family: $font1;\n//            font-weight: 800;\n//        }\n//    \n//}\n","// Mappy breakpoints\n// -----------------\n// Output media query with focus on min-width, max-width, min-height and max-height. \n// Other media rules are passed as the second argument in a map\n// \n// @author Zell Liew      \n// =================\n$breakpoints: () !default;\n$mappy-queries: () !default;\n\n// Mappy BP [Mixin]\n// ----------------\n// - $queries         : <string> or <number> in the format: \n//                      <min-width> <max-width> h <min-height> <max-height> <key> <value>\n// - $type            : <media-type> \n// - $query-fallback  : <string> selector class\n// - $breakpoints     : <map>\n@mixin mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n\n  // Gets mappy map through mappy-bp fn\n  $mappy-map: mappy-bp($queries, $type, $query-fallback, $breakpoints);\n\n  // Outputs media string\n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if $query-fallback {\n    #{$query-fallback} & {\n      @content;\n    }\n  }\n}\n\n// Mappy Query [Mixin]\n// -------------------\n// Output query from $mappy-queries map. \n// $query : <string> from $mappy-queries key\n@mixin mappy-query($query, $mappy-queries: $mappy-queries) {\n  @if not map-has-key($mappy-queries, $query) {\n    @error \"#{$mappy-queries} does not contain #{$query}\";\n  }\n\n  $mappy-map: map-get($mappy-queries, $query);\n  \n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if map-get($mappy-map, query-fallback) {\n    #{map-get($mappy-map, query-fallback)} & {\n      @content;\n    }\n  }\n}\n\n// Mappy BP [Function]\n// -------------------\n// Returns a map with 3 keys\n// - type           : Media type\n// - media-string   : media query string\n// - query-fallback : query fallback (if any)\n@function mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  $media-string: ();\n  $_return: ();\n  $media-map: parse-bp($queries, $breakpoints);\n\n  @each $key, $value in $media-map {\n    @if $value and $value != 0 {\n      @if $media-string == (()) {\n        $media-string: append($media-string, unquote(\"(#{$key}: #{$value})\"));\n      }\n\n      @else {\n        $media-string: append($media-string, unquote(\"and (#{$key}: #{$value})\"));\n      }\n    }\n  }\n  $_return: (\n    type: $type, \n    media-string: inspect($media-string), \n    query-fallback: $query-fallback\n  );\n\n  @return $_return;\n}\n\n// BP [Mixin]\n// ----------\n// Convenience mixin for Mappy Breakpoints\n@mixin bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  @include mappy-bp($queries, $type, $query-fallback, $breakpoints) {\n    @content;\n  }\n}\n\n// Parse BP [function]\n// -------------------\n// Parses arguments and returns a map with 4 keys\n@function parse-bp($queries, $breakpoints) {\n  $_return: ();\n  $_i: 1;\n  $_minw: null;\n  $_maxw: null;\n  $_minh: null;\n  $_maxh: null;\n  $_length: length($queries);\n\n  // Checks for width queries\n  $_minw: nth($queries, 1);\n  $_minw: mappy-validate($_minw, $breakpoints);\n\n  // Check for width queries\n  @if $_minw {\n    $_minw: mappy-convert-to-em($_minw);\n    $_return: map-merge($_return, (min-width: $_minw));\n    $queries: set-nth($queries, 1, null);\n  }\n\n  // Checks if there is a max width query\n  @if $_minw and $_length >= 2 {\n    $_maxw: nth($queries, 2);\n    $_maxw: mappy-validate($_maxw, $breakpoints);\n  }\n\n  @if $_maxw {\n    $_maxw: mappy-convert-to-em($_maxw - 1px);\n    $_return: map-merge($_return, (max-width: $_maxw));\n    $queries: set-nth($queries, 2, null);\n  }\n  \n  // Checks for height queries\n  $_h: index($queries, h) or index($queries, height);\n\n  @if $_h {\n    $_minh: nth($queries, $_h + 1);\n    $_minh: mappy-validate($_minh, $breakpoints);\n\n    @if $_minh {\n      $_minh: mappy-convert-to-em($_minh);\n      $_return: map-merge($_return, (min-height: $_minh));\n      $queries: set-nth($queries, $_h + 1, null);\n    }\n\n    // Checks if there is a max height query\n    @if $_length - $_h >= 2 {\n      $_maxh: nth($queries, $_h + 2);\n      $_maxh: mappy-validate($_maxh, $breakpoints);\n    }\n\n    @if $_maxh {\n      $_maxh: mappy-convert-to-em($_maxh - 1px);\n      $_return: map-merge($_return, (max-height: $_maxh));\n      $queries: set-nth($queries, $_h + 2, null);\n    }\n    // Reset h marker\n    $queries: set-nth($queries, $_h, null);\n  }\n\n  // Checks for other queries\n  @while $_i <= length($queries) {\n    $_key: nth($queries, $_i);\n\n    @if $_key and $_length - $_i >= 1 {\n      $_val: nth($queries, $_i + 1);\n      $_return: map-merge($_return, (#{$_key}: $_val));\n      $queries: set-nth($queries, $_i, null);\n      $queries: set-nth($queries, $_i + 1, null);\n    }\n\n    @else if $_key {\n      @warn \"Mappy Breakpoints is missing value for media feature \"#{$_key}\"\";\n    }\n    $_i: $_i + 1;\n  }\n  @return $_return;\n}\n\n// Mappy Validate [Function]\n// -------------------------\n// Checks if $query given is one of the following: \n// 1) Is a $key in the $breakpoints map\n// 2) Is a number\n// 3) Is a \"max\", \"max-width\" or \"max-height\" string\n@function mappy-validate($query, $breakpoints) {\n  $_return: null;\n\n  @if map-has-key($breakpoints, $query) {\n    $_return: map-get($breakpoints, $query);\n  }\n\n  @else if type-of($query) == number {\n    $_return: $query;\n  }\n\n  @else if $query == \"max\" or $query == \"max-height\" or $query == \"max-width\" {\n    $_return: 0;\n  }\n\n  @else {\n    $_return: null;\n  }\n  @return $_return;\n}\n\n// Mappy Convert To Em [Function]\n// -------------------------------\n// Checks and converts px values to em. Leave other units untouched.\n\n@function mappy-convert-to-em($val) {\n  @if unit($val) == \"px\" or $val == 0 {\n    @return mappy-em($val);\n  }\n\n  @else {\n    @error \"Breakpoint value must have a unit if it's a number\";\n  }\n}\n\n// Mappy Em [Function]\n// --------------------\n// Converts pixels to em with $base-font-size\n// - https://gist.github.com/ijy/1441967\n@function mappy-em($target, $context: 16px) {\n  @if $target == 0 {\n    @return 0;\n  }\n  @return $target / $context * 1em;\n}","//************************************************************************//\n// Background property for adding multiple backgrounds using shorthand\n// notation.\n//************************************************************************//\n\n@mixin background($backgrounds...) {\n  $webkit-backgrounds: ();\n  $spec-backgrounds: ();\n\n  @each $background in $backgrounds {\n    $webkit-background: ();\n    $spec-background: ();\n    $background-type: type-of($background);\n\n    @if $background-type == string or $background-type == list {\n      $background-str: if($background-type == list, nth($background, 1), $background);\n\n      $url-str:       str-slice($background-str, 1, 3);\n      $gradient-type: str-slice($background-str, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser(\"#{$background}\");\n        $webkit-background: map-get($gradients, webkit-image);\n        $spec-background:   map-get($gradients, spec-image);\n      }\n\n      @else {\n        $webkit-background: $background;\n        $spec-background:   $background;\n      }\n    }\n\n    @else {\n      $webkit-background: $background;\n      $spec-background:   $background;\n    }\n\n    $webkit-backgrounds: append($webkit-backgrounds, $webkit-background, comma);\n    $spec-backgrounds:   append($spec-backgrounds,   $spec-background,   comma);\n  }\n\n  background: $webkit-backgrounds;\n  background: $spec-backgrounds;\n}\n","@function _linear-gradient-parser($image) {\n  $image: unquote($image);\n  $gradients: ();\n  $start: str-index($image, \"(\");\n  $end: str-index($image, \",\");\n  $first-val: str-slice($image, $start + 1, $end - 1);\n\n  $prefix: str-slice($image, 1, $start);\n  $suffix: str-slice($image, $end, str-length($image));\n\n  $has-multiple-vals: str-index($first-val, \" \");\n  $has-single-position: unquote(_position-flipper($first-val) + \"\");\n  $has-angle: is-number(str-slice($first-val, 1, 1));\n\n  @if $has-multiple-vals {\n    $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);\n  }\n\n  @else if $has-single-position != \"\" {\n    $pos: unquote($has-single-position + \"\");\n\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $prefix + \"to \" + $pos + $suffix\n    );\n  }\n\n  @else if $has-angle {\n    // Rotate degree for webkit\n    $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);\n  }\n\n  @else {\n    $gradients: (\n      webkit-image: -webkit- + $image,\n      spec-image: $image\n    );\n  }\n\n  @return $gradients;\n}\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Container Syntax\n// ================\n\n// Container [mixin]\n// -----------------\n// Set a container element\n// - [$layout]  : <settings>\n@mixin container(\n  $layout: $susy\n) {\n  $inspect    : $layout;\n  $layout     : parse-grid($layout);\n\n  $_width     : get-container-width($layout);\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\n\n  $_box       : susy-get(box-sizing, $layout);\n\n  @if $_box {\n    @include output((box-sizing: $_box));\n  }\n\n  @include susy-inspect(container, $inspect);\n  @include float-container($_width, $_justify, $_property);\n  @include show-grid($layout);\n}\n\n// Container [function]\n// --------------------\n// Return container width\n// - [$layout]  : <settings>\n@function container(\n  $layout: $susy\n) {\n  $layout: parse-grid($layout);\n  @return get-container-width($layout);\n}\n\n// Get Container Width\n// -------------------\n// Calculate the container width\n// - [$layout]: <settings>\n@function get-container-width(\n  $layout: $susy\n) {\n  $layout         : parse-grid($layout);\n  $_width         : susy-get(container, $layout);\n  $_column-width  : susy-get(column-width, $layout);\n  $_math          : susy-get(math, $layout);\n\n  @if not($_width) or $_width == auto {\n    @if valid-column-math($_math, $_column-width) {\n      $_columns   : susy-get(columns, $layout);\n      $_gutters   : susy-get(gutters, $layout);\n      $_spread    : if(is-split($layout), wide, narrow);\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\n    } @else {\n      $_width: 100%;\n    }\n  }\n\n  @return $_width;\n}\n\n// Parse Container Position\n// ------------------------\n// Parse the $container-position into margin values.\n// - [$justify]   : left | center | right | <length> [<length>]\n@function parse-container-position(\n  $justify: map-get($susy-defaults, container-position)\n) {\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\n\n  @if not(index(left right center, $justify)) {\n    $_return: nth($justify, 1);\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\n  }\n\n  @return $_return;\n}\n","// Susy Fallback Clearfix\n// ======================\n\n\n// Clearfix\n// --------\n// Check for an existing support mixin, or provide a simple fallback.\n@mixin susy-clearfix {\n  @if susy-support(clearfix, (mixin: clearfix)) {\n    @include clearfix;\n  } @else {\n    &:after {\n      content: \" \";\n      display: block;\n      clear: both;\n    }\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gallery Syntax\n// ==============\n\n// Gallery\n// -------\n// Create an isolated gallery\n// - $span        : <span>\n// - [$selector]  : child | of-type\n@mixin gallery(\n  $span,\n  $selector: child\n) {\n  $inspect    : $span;\n  $span       : parse-span($span);\n  $span       : map-merge($span, (location: 1));\n\n  $n            : susy-get(span, $span);\n  $columns      : susy-get(columns, $span);\n  $context      : susy-count($columns);\n  $flow         : susy-get(flow, $span);\n\n  $inside       : is-inside($span);\n  $from         : from($flow);\n  $line         : floor($context / $n);\n  $symmetrical  : is-symmetrical($columns);\n\n  $output: (\n    width             : null,\n    float             : from,\n    margin-before     : null,\n    margin-after      : null,\n    padding-before    : null,\n    padding-after     : null,\n    flow              : $flow,\n  );\n\n  @if $inside {\n    $gutters: get-gutters($span);\n    $output: map-merge($output, (\n      padding-before: map-get($gutters, before),\n      padding-after: map-get($gutters, after),\n    ));\n  }\n\n  @if $symmetrical {\n    $output: map-merge($output, (width: get-span-width($span)));\n  }\n\n  $box          : susy-get(box-sizing, $span);\n  $global-box   : if(susy-get(global-box-sizing) == 'border-box', true, false);\n\n  @include susy-inspect(gallery, $inspect);\n\n  // Collective Output\n  @if $box == border-box or ($inside and not($box) and not($global-box)) {\n    @include output((box-sizing: border-box));\n  } @else if $box == content-box {\n    @include output((box-sizing: content-box));\n  }\n\n  @include float-span-output($output...);\n\n  // Individual Loop\n  @for $item from 1 through $line {\n    $nth: '#{$line}n + #{$item}';\n    &:nth-#{$selector}(#{$nth}) {\n      // Individual Prep\n      $output: (\n        width             : if($symmetrical, null, get-span-width($span)),\n        float             : null,\n        margin-before     : get-isolation($span),\n        margin-after      : -100%,\n        padding-before    : null,\n        padding-after     : null,\n        flow              : $flow,\n      );\n\n      // Individual Output\n      @include float-span-output($output...);\n\n      @if get-edge($span) == first {\n        @include break;\n        @include first($span);\n      } @else {\n        @include nobreak;\n      }\n\n      // Individual Location Increment\n      $location: get-location($span) + $n;\n      $location: if($location > $context, 1, $location);\n      $span: map-merge($span, (location: $location));\n    }\n  }\n}\n","// Isolation Syntax\n// ================\n\n\n// Isolate [Mixin]\n// ---------------\n// Set isolation as an override.\n// - $location: <span>\n@mixin isolate(\n  $isolate: 1\n) {\n  $inspect: $isolate;\n\n  $output: (\n    push: isolate($isolate),\n    flow: susy-get(flow, $isolate),\n  );\n\n  @include susy-inspect(isolate, $inspect);\n  @include isolate-output($output...);\n}\n\n\n// Isolate [function]\n// ------------------\n// Return an isolation offset width.\n// - $location: <span>\n@function isolate(\n  $isolate: 1\n) {\n  $isolate: parse-span($isolate);\n  $isolation: susy-get(span, $isolate);\n\n  @if $isolation and not(get-location($isolate)) {\n    $new: (\n      span: null,\n      location: $isolation,\n    );\n    $isolate: map-merge($isolate, $new);\n  }\n\n  @return get-isolation($isolate);\n}\n\n\n// Get Isolation\n// -------------\n// Return the isolation offset width\n// - $input: <map>\n@function get-isolation(\n  $input\n) {\n  $location   : get-location($input);\n  $columns    : susy-get(columns, $input);\n  $width      : null;\n\n  @if type-of($location) == number and not(unitless($location)) {\n    $width: $location;\n  } @else if $location {\n    $push: $location - 1;\n    @if $push > 0 {\n      $push: map-merge($input, (\n        span: $push,\n        location: 1,\n        spread: wide,\n      ));\n      $width: get-span-width($push);\n    }\n  }\n\n  @if susy-get(gutter-position, $input) == split\n      and susy-get(gutters, $input) > 0 {\n    $width: if($width == null, gutters($input), $width + gutters($input));\n  }\n\n  @return $width or 0;\n}\n","// Row Start & End\n// ===============\n\n// Break\n// -----\n// Apply to any element that should force a line break.\n@mixin break {\n  @include output((clear: both));\n}\n\n\n// NoBreak\n// -------\n// Cancel the break() effect, e.g. when using media queries.\n@mixin nobreak {\n  @include output((clear: none));\n}\n\n\n// Full\n// ----\n// - [$context]: <layout shorthand>\n@mixin full(\n  $context: $susy\n) {\n  $inspect : $context;\n  @include susy-inspect(full, $inspect);\n  @include span(full of parse-grid($context) break);\n}\n\n\n// First\n// -----\n// - [$context]: <settings>\n@mixin first(\n  $context: $susy\n) {\n  $inspect  : $context;\n  $context  : parse-grid($context);\n  $flow     : susy-get(flow, $context);\n\n  @include susy-inspect(first, $inspect);\n  @if not(is-split($context)) {\n    @include float-first($flow);\n  }\n}\n\n@mixin alpha(\n  $context: $susy\n) {\n  @include first($context);\n}\n\n\n// Last\n// ----\n// - [$context]: <settings>\n@mixin last(\n  $context: $susy\n) {\n  $inspect  : $context;\n  $context  : parse-grid($context);\n\n  @include susy-inspect(last, $inspect);\n\n  $output: (\n    flow: susy-get(flow, $context),\n    last-flow: susy-get(last-flow, $context),\n    margin: if(is-split($context), null, 0),\n  );\n\n  @include float-last($output...);\n}\n\n@mixin omega(\n  $context: $susy\n) {\n  @include last($context);\n}\n\n\n// Get Edge\n// --------\n// Calculate edge value based on location, if possible\n@function get-edge(\n  $span\n) {\n  $span       : parse-span($span);\n  $edge       : susy-get(edge, $span);\n\n  @if not($edge) {\n    $count: susy-count(susy-get(columns, $span));\n    $location: susy-get(location, $span);\n    $n: susy-get(span, $span);\n\n    $number: if(type-of($location) == number, true, false);\n    $index: if($number and unitless($location), true, false);\n\n    @if $n == $count {\n      $edge: full;\n    } @else if $location and $n and $index {\n      @if $location == 1 {\n        $edge: if($n == $count, full, first);\n      } @else if $location + $n - 1 == $count {\n        $edge: last;\n      }\n    }\n  }\n\n  @if $edge == alpha or $edge == omega {\n    $edge: if($edge == alpha, first, last);\n  }\n\n  @return $edge;\n}\n\n\n// Get Location\n// ------------\n// Calculate location value based on edge, if possible\n@function get-location(\n  $span\n) {\n  $span       : parse-span($span);\n  $location   : susy-get(location, $span);\n  $edge       : get-edge($span);\n  $n          : susy-get(span, $span);\n\n  @if $edge and not($location) and type-of($n) == number and unitless($n) {\n    @if $edge == first {\n      $location: 1;\n    } @else if $edge == last {\n      $location: susy-count(susy-get(columns, $span)) - $n + 1;\n    }\n  }\n\n  @return $location\n}\n","// Float Ends API\n// ==============\n\n// Susy End Defaults\n// -----------------\n// - PRIVATE\n@include susy-defaults((\n  last-flow: to,\n));\n\n// Float Last\n// ----------\n// - [$flow]  : ltr | rtl\n@mixin float-last(\n  $flow: map-get($susy-defaults, flow),\n  $last-flow: map-get($susy-defaults, last-flow),\n  $margin: 0\n) {\n  $to: to($flow);\n\n  $output: (\n    float: if($last-flow == to, $to, null),\n    margin-#{$to}: $margin,\n  );\n\n  @include output($output);\n}\n\n// Float First\n// -----------\n// - [$flow]  : ltr | rtl\n@mixin float-first(\n  $flow: map-get($susy-defaults, flow)\n) {\n  $output: (\n    margin-#{from($flow)}: 0,\n  );\n\n  @include output($output);\n}\n"],"sourceRoot":"/source/"}